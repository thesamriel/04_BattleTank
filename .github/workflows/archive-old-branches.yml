name: Archive Old Branches

on: 
  push:
  # schedule:
  #   - cron: '*/15 * * * *'

jobs:
  ArchiveStaleBranches:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write  
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python Dependencies
        run: | 
          python -m pip install --upgrade pip google-generativeai

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh
        
      - name: Filter and archive stale branches
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Fetch all branches
          gh api repos/${{ github.repository }}/branches | jq -r '.[].name' > branches.txt

          # Loop through branches
          while read branch; do
            # Skip main branch
            if [ "$branch" = "master" ] || [ "$branch" = "main" ]; then
              echo "Skipping main branch: ${branch}..."
              continue
            fi
            
          # Get last commit date
          last_commit_date=$(gh api repos/${{ github.repository }}/commits/$branch --jq '.commit.committer.date')

          # Calculate branch age in days
          branch_age_minutes=$(( ($(date -u +%s) - $(date -u -d "$last_commit_date" +%s)) / 60 ))

          # Check whether the branch is old enough
          if [ $branch_age_minutes -gt 5 ]; then
            echo "  Branch $branch is $branch_age_minutes minutes old. Archiving..."

            # Get number of commits
            commit_count=$(gh api repos/${{ github.repository }}/compare/master...$branch --jq '.commits | length')
            
            if [ $commit_count -gt 0 ]; then
              # Format the last commit date
              last_commit_date_f=$(date -u -d "$last_commit_date" +"%B %d, %Y")

              # Get the first commit date
              first_commit_date=$(gh api repos/${{ github.repository }}/branches/$branch --jq '.commit.committer.date')
              first_commit_date_f=$(date -u -d "$first_commit_date" +"%B %d, %Y")

              # Get contributors to the branch
              contributors=$(gh api repos/${{ github.repository }}/compare/master...$branch --jq '.commits[] | "  - \(.commit.author.name) (@\(.author.login))  "' | sort | uniq)

              diff=$(git diff origin/master...origin/$branch)
              summary=$(python .github/workflows/create_pr_summary.py <<< "$diff")

              # Create the PR body with contributors
              pr_body="## **Archiving branch \`$branch\`**
            - **Last commit on:** $last_commit_date_f  
            - **First commit on:** $first_commit_date_f  
            - **Total number of commits:** $commit_count  
            - **Contributors:**  
            $contributors  
            ## Changes Summary  
            *(Generated using Gemini AI)*  
            $summary"
              
              # Create, close, and delete the branch
              echo "  Create PR for ${branch}..."
              pr_url=$(gh pr create --title "Archive branch \"$branch\"" --body "$pr_body" --base master --head $branch)

              # Wait for the PR to appear and close it
              max_retries=5
              retry_interval=5  # seconds

              for ((i=1; i <= $max_retries; i++)); do
                if gh api -X GET $pr_url --silent; then
                  echo "  Closing the PR..."
                  gh pr close $pr_url
                  # gh api -X DELETE repos/${{ github.repository }}/git/refs/heads/$branch
                  echo "  Branch $branch archived and deleted."
                  break 2
                fi
                  echo "  Waiting for PR $pr_number to be created. Retrying in $retry_interval seconds..."
                  sleep $retry_interval
              done
            
              if [[ -z "$pr_number" ]]; then
                echo "  Failed to find and close the PR after $max_retries retries."
              fi
  
            else
              echo "No commits between $branch and master. Deleting branch directly..."
              gh api -X DELETE repos/${{ github.repository }}/git/refs/heads/$branch
            fi

          else
            echo "Branch $branch is $branch_age_minutes days old. Skipping..."
          fi
          
          done < branches.txt

