name: Archive Old Branches

on: 
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'

jobs:
  ArchiveStaleBranches:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write  
    steps:
      - name: Checkout
        uses: actions/checkout@v4
    
      - name: Install GitHub CLI
        run: sudo apt-get install -y gh
        
      - name: Filter and archive stale branches
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch all branches
          gh api repos/${{ github.repository }}/branches | jq -r '.[].name' > branches.txt

          # Loop through branches
          while read branch; do
            # Skip main branch
            if [ "$branch" = "master" ] || [ "$branch" = "main" ]; then
              echo "Skipping main branch: $branch"
              continue
            fi
            
          # Get last commit date
          last_commit_date=$(gh api repos/${{ github.repository }}/commits/$branch --jq '.commit.committer.date')

          # Calculate branch age in days
          branch_age_minutes=$(( ($(date -u +%s) - $(date -u -d "$last_commit_date" +%s)) / 60 ))

          if [ $branch_age_minutes -gt 5 ]; then
            echo "Branch $branch is $branch_age_minutes minutes old. Archiving..."

            # Get contributors to the branch
            # contributors=$(gh api repos/${{ github.repository }}/commits/$branch --jq '.[].author.login')
            contributors="Just ME:)"
            # Create the PR body with contributors
            pr_body="Archiving branch $branch.\nLast commit on: $last_commit_date\n\nContributors:\n$contributors"

            # Check if there are commits between the branch and master
            commits_between=$(gh api repos/${{ github.repository }}/compare/master...$branch --jq '.commits[].sha' | wc -l)
          
            if [ $commits_between -gt 0 ]; then
              # Create, close, and delete the branch
              echo "Create PR..."
              pr_object=$(gh pr create --title "Archive PR for branch \"$branch\"" --body "$pr_body" --base master --head $branch)
              pr_number=$($pr_object --jq '.number')

              # Wait for the PR to appear and close it
              max_retries=3
              retry_interval=5  # seconds
              echo "Wait for PR to appear
              for ((i=1; i <= $max_retries; i++)); do
                  # Check if the PR exists using the number
                  if gh api -X GET /repos/${{ github.repository }}/pulls/$pr_number --silent; then
                      echo "Found the PR. Closing now..."
                      gh pr close $pr_number
                      break
                  fi
                  echo "Waiting for PR $pr_number to be created. Retrying in $retry_interval seconds..."
                  sleep $retry_interval
              done
            
              if [[ -z "$pr_number" ]]; then
                echo "Failed to find and close the PR after $max_retries retries."
              fi
  
              # gh api -X DELETE repos/${{ github.repository }}/git/refs/heads/$branch
              echo "Branch $branch archived and deleted."
            else
              echo "No commits between $branch and master. Deleting branch directly."
              gh api -X DELETE repos/${{ github.repository }}/git/refs/heads/$branch
            fi

          else
            echo "Branch $branch is $branch_age_minutes days old. Skipping."
          fi
          
          done < branches.txt

